@model Ecomm.Models.ViewModels.ProductsViewModel

@{
    ViewData["Title"] = "Products";
}

<div class="container mx-auto px-4 py-8">
    <!-- Search Bar -->
    <div class="mb-8">
        <div class="max-w-2xl mx-auto">
            <div class="relative">
                <input type="text" 
                       id="searchQuery" 
                       name="searchQuery" 
                       value="@Model.SearchQuery"
                       class="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500" 
                       placeholder="Search products...">
                <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
                <div id="searchSpinner" class="absolute inset-y-0 right-0 pr-3 flex items-center hidden">
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-primary-600"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="flex flex-col md:flex-row gap-8">
        <!-- Filters Sidebar -->
        <div class="md:w-64 flex-shrink-0">
            <div class="bg-white rounded-lg shadow-md p-6 sticky top-24">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-lg font-semibold text-gray-900">Filters</h2>
                    <button id="clearFilters" class="text-sm text-gray-600 hover:text-primary-600 transition-colors">
                        <i class="fas fa-times mr-1"></i> Clear
                    </button>
                </div>
                <form id="filterForm" method="get" asp-action="Index" class="space-y-6">
                    <input type="hidden" name="searchQuery" value="@Model.SearchQuery">
                    
                    <!-- Category Filter -->
                    <div>
                        <label for="categoryId" class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                        <div class="relative">
                            <select name="categoryId" 
                                    id="categoryId" 
                                    class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 rounded-lg">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id" selected="@(Model.CategoryId == category.Id)">
                                        @category.Name
                                    </option>
                                }
                            </select>
                            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                <i class="fas fa-chevron-down text-gray-400"></i>
                            </div>
                        </div>
                    </div>

                    <!-- Price Range -->
                    <div class="space-y-4">
                        <h3 class="text-sm font-medium text-gray-700">Price Range</h3>
                        <div>
                            <label for="minPrice" class="block text-sm text-gray-600 mb-1">Min Price</label>
                            <div class="relative rounded-lg shadow-sm">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500 sm:text-sm">$</span>
                                </div>
                                <input type="number" 
                                       name="minPrice" 
                                       id="minPrice" 
                                       value="@Model.MinPrice"
                                       step="0.01"
                                       min="0"
                                       class="block w-full pl-7 pr-3 py-2 border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500 sm:text-sm" 
                                       placeholder="0.00">
                            </div>
                        </div>
                        <div>
                            <label for="maxPrice" class="block text-sm text-gray-600 mb-1">Max Price</label>
                            <div class="relative rounded-lg shadow-sm">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500 sm:text-sm">$</span>
                                </div>
                                <input type="number" 
                                       name="maxPrice" 
                                       id="maxPrice" 
                                       value="@Model.MaxPrice"
                                       step="0.01"
                                       min="0"
                                       class="block w-full pl-7 pr-3 py-2 border-gray-300 rounded-lg focus:ring-primary-500 focus:border-primary-500 sm:text-sm" 
                                       placeholder="1000.00">
                            </div>
                        </div>
                    </div>

                    <!-- Sort By -->
                    <div>
                        <label for="sortBy" class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                        <div class="relative">
                            <select name="sortBy" 
                                    id="sortBy" 
                                    class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 rounded-lg">
                                <option value="name_asc" selected="@(Model.SortBy == "name_asc")">Name (A-Z)</option>
                                <option value="name_desc" selected="@(Model.SortBy == "name_desc")">Name (Z-A)</option>
                                <option value="price_asc" selected="@(Model.SortBy == "price_asc")">Price (Low to High)</option>
                                <option value="price_desc" selected="@(Model.SortBy == "price_desc")">Price (High to Low)</option>
                            </select>
                            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                <i class="fas fa-chevron-down text-gray-400"></i>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Main Content -->
        <div class="flex-1">
            <!-- Loading Skeleton -->
            <div id="loadingSkeleton" class="hidden">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    @for (int i = 0; i < 6; i++)
                    {
                        <div class="bg-white rounded-lg shadow-md overflow-hidden animate-pulse">
                            <div class="h-48 bg-gray-200"></div>
                            <div class="p-4 space-y-3">
                                <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                                <div class="h-4 bg-gray-200 rounded w-1/2"></div>
                                <div class="h-4 bg-gray-200 rounded w-full"></div>
                                <div class="flex justify-between space-x-4">
                                    <div class="h-8 bg-gray-200 rounded w-1/2"></div>
                                    <div class="h-8 bg-gray-200 rounded w-1/3"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Products Grid -->
            <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var product in Model.Products)
                {
                    <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
                        <div class="relative">
                            <a asp-controller="Home" asp-action="Details" asp-route-id="@product.Id" class="block">
                                <img src="@product.ImageUrl" 
                                     alt="@product.Name" 
                                     class="w-full h-48 object-cover transition-transform duration-300 hover:scale-105">
                            </a>
                        </div>
                        <div class="p-4">
                            <div class="flex justify-between items-start">
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-900">
                                        <a asp-controller="Home" 
                                           asp-action="Details" 
                                           asp-route-id="@product.Id" 
                                           class="hover:text-primary-600 transition-colors">
                                            @product.Name
                                        </a>
                                    </h3>
                                    <p class="text-sm text-gray-500">@product.Category.Name</p>
                                </div>
                                <p class="text-lg font-bold text-primary-600">$@product.Price.ToString("F2")</p>
                            </div>
                            <p class="mt-2 text-sm text-gray-600 line-clamp-2">@product.Description</p>
                            <div class="mt-4 flex justify-between items-center space-x-2">
                                <form asp-controller="Cart" asp-action="AddToCart" method="post" class="flex-1" onsubmit="return false;">
                                    <input type="hidden" name="productId" value="@product.Id" />
                                    <input type="hidden" name="quantity" value="1" />
                                    <button type="button" 
                                            onclick="handleAddToCart(this.closest('form'))"
                                            class="w-full inline-flex items-center justify-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                        <i class="fas fa-shopping-cart mr-2"></i>
                                        Add to Cart
                                    </button>
                                </form>
                                <form asp-controller="Wishlist" asp-action="AddToWishlist" method="post" onsubmit="return false;">
                                    <input type="hidden" name="productId" value="@product.Id" />
                                    <button type="button"
                                            onclick="handleAddToWishlist(this.closest('form'))"
                                            class="inline-flex items-center justify-center p-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
                                        <i class="far fa-heart"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- No Results Message -->
            <div id="noResults" class="@(Model.Products.Any() ? "hidden" : "") text-center py-12">
                <div class="bg-white rounded-lg shadow-md p-8 max-w-md mx-auto">
                    <i class="fas fa-search text-4xl text-gray-400 mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900">No products found</h3>
                    <p class="mt-2 text-sm text-gray-500">Try adjusting your filters or search criteria</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let searchTimeout;
        const debounceDelay = 300;

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            initializeFilters();
        });

        function setupEventListeners() {
            // Real-time search
            document.getElementById('searchQuery').addEventListener('input', handleSearchInput);

            // Filter change handlers
            ['categoryId', 'sortBy', 'minPrice', 'maxPrice'].forEach(id => {
                document.getElementById(id).addEventListener('change', handleFilterChange);
            });

            // Clear filters
            document.getElementById('clearFilters').addEventListener('click', clearFilters);
        }

        function handleSearchInput(e) {
            showSearchSpinner();
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                document.querySelector('input[name="searchQuery"]').value = e.target.value;
                handleFilterChange();
            }, debounceDelay);
        }

        function handleFilterChange() {
            const formData = new FormData(document.getElementById('filterForm'));
            const searchParams = new URLSearchParams(formData);
            
            showLoadingSkeleton();

            fetch(`/Products/Index?${searchParams.toString()}`)
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    // Update products grid
                    document.getElementById('productsGrid').innerHTML = 
                        doc.getElementById('productsGrid').innerHTML;
                    
                    // Update URL without refreshing
                    window.history.pushState({}, '', `?${searchParams.toString()}`);
                    
                    // Toggle no results message
                    const hasProducts = doc.getElementById('productsGrid').children.length > 0;
                    document.getElementById('noResults').classList.toggle('hidden', hasProducts);
                })
                .finally(() => {
                    hideLoadingSkeleton();
                    hideSearchSpinner();
                });
        }

        function showLoadingSkeleton() {
            document.getElementById('loadingSkeleton').classList.remove('hidden');
            document.getElementById('productsGrid').classList.add('hidden');
        }

        function hideLoadingSkeleton() {
            document.getElementById('loadingSkeleton').classList.add('hidden');
            document.getElementById('productsGrid').classList.remove('hidden');
        }

        function showSearchSpinner() {
            document.getElementById('searchSpinner').classList.remove('hidden');
        }

        function hideSearchSpinner() {
            document.getElementById('searchSpinner').classList.add('hidden');
        }

        function clearFilters() {
            document.getElementById('filterForm').reset();
            document.getElementById('searchQuery').value = '';
            handleFilterChange();
        }

        // Toast notification function
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} transition-opacity duration-500`;
            toast.style.zIndex = '1000';
            toast.textContent = message;
            document.body.appendChild(toast);

            // Fade out and remove after 3 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        async function handleAddToCart(form) {
            const button = form.querySelector('button');
            const originalContent = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Adding...</span>';
            
            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        button.innerHTML = '<i class="fas fa-check"></i><span>Added to Cart!</span>';
                        button.classList.remove('bg-primary-600', 'hover:bg-primary-700');
                        button.classList.add('bg-green-500', 'hover:bg-green-600');
                        
                        if (window.updateCartCountAfterAdd) {
                            window.updateCartCountAfterAdd();
                        }
                        
                        setTimeout(() => {
                            button.disabled = false;
                            button.innerHTML = originalContent;
                            button.classList.remove('bg-green-500', 'hover:bg-green-600');
                            button.classList.add('bg-primary-600', 'hover:bg-primary-700');
                        }, 2000);
                    }
                } else {
                    throw new Error('Failed to add to cart');
                }
            } catch (error) {
                console.error('Error:', error);
                button.innerHTML = originalContent;
                showToast('Failed to add product to cart', 'error');
            } finally {
                button.disabled = false;
            }
        }

        async function handleAddToWishlist(form) {
            const button = form.querySelector('button');
            const icon = button.querySelector('i');
            button.disabled = true;
            
            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        icon.classList.remove('far');
                        icon.classList.add('fas', 'text-red-500');
                        button.classList.add('border-red-500');
                        
                        if (window.updateWishlistCountAfterAdd) {
                            window.updateWishlistCountAfterAdd();
                        }
                        
                        setTimeout(() => {
                            icon.classList.remove('fas', 'text-red-500');
                            icon.classList.add('far');
                            button.classList.remove('border-red-500');
                        }, 2000);
                    }
                } else {
                    throw new Error('Failed to add to wishlist');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Failed to add product to wishlist', 'error');
            } finally {
                button.disabled = false;
            }
        }
    </script>
} 